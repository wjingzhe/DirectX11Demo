//
// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
//
//
// Buffer Definitions: 
//
// cbuffer cbPerObject
// {
//
//   float4x4 g_mWolrdViewProjection;   // Offset:    0 Size:    64
//   float4x4 g_mWolrd;                 // Offset:   64 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// cbPerObject                       cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz 
// NORMAL                   0   xyz         1     NONE   float   xyz 
// TEXCOORD                 0   xy          2     NONE   float   xy  
// TANGENT                  0   xyz         3     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// NORMAL                   0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
vs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer cb0[7], immediateIndexed
dcl_input v0.xyz
dcl_input v1.xyz
dcl_input v2.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xy
dcl_temps 3
//
// Initial variable locations:
//   v0.x <- vin.PositionL.x; v0.y <- vin.PositionL.y; v0.z <- vin.PositionL.z; 
//   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
//   v2.x <- vin.TextureUV.x; v2.y <- vin.TextureUV.y; 
//   v3.x <- vin.TangentUVW.x; v3.y <- vin.TangentUVW.y; v3.z <- vin.TangentUVW.z; 
//   o2.x <- <BaseGeometryVS return value>.TextureUV.x; o2.y <- <BaseGeometryVS return value>.TextureUV.y; 
//   o1.x <- <BaseGeometryVS return value>.NormalW.x; o1.y <- <BaseGeometryVS return value>.NormalW.y; o1.z <- <BaseGeometryVS return value>.NormalW.z; o1.w <- <BaseGeometryVS return value>.NormalW.w; 
//   o0.x <- <BaseGeometryVS return value>.PositionH.x; o0.y <- <BaseGeometryVS return value>.PositionH.y; o0.z <- <BaseGeometryVS return value>.PositionH.z; o0.w <- <BaseGeometryVS return value>.PositionH.w
//
#line 33 "C:\WorkSpace\DirectX11Demo\TestTriangle\src\Shaders\DrawBasicGeometry.hlsl"
mov r0.xyz, v0.xyzx
mov r0.w, l(1.000000)
dp4 r1.x, r0.xyzw, cb0[0].xyzw  // r1.x <- vout.PositionH.x
dp4 r1.y, r0.xyzw, cb0[1].xyzw  // r1.y <- vout.PositionH.y
dp4 r1.z, r0.xyzw, cb0[2].xyzw  // r1.z <- vout.PositionH.z
dp4 r1.w, r0.xyzw, cb0[3].xyzw  // r1.w <- vout.PositionH.w

#line 37
dp3 r0.x, v1.xyzx, cb0[4].xyzx  // r0.x <- vout.NormalW.x
dp3 r0.y, v1.xyzx, cb0[5].xyzx  // r0.y <- vout.NormalW.y
dp3 r0.z, v1.xyzx, cb0[6].xyzx  // r0.z <- vout.NormalW.z
mov r0.w, l(1.000000)  // r0.w <- vout.NormalW.w
mov r2.xy, v2.xyxx  // r2.x <- vout.TextureUV.x; r2.y <- vout.TextureUV.y
mov o0.xyzw, r1.xyzw
mov o1.xyzw, r0.xyzw
mov o2.xy, r2.xyxx
ret 
// Approximately 15 instruction slots used
